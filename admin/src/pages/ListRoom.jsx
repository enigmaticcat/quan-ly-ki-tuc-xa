import  { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

// URL g·ªëc c·ªßa backend ƒë·ªÉ l·∫•y ·∫£nh, kh√¥ng bao g·ªìm /api
const BACKEND_STATIC_URL = 'http://localhost:5000'; // Ho·∫∑c l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ri√™ng

const RoomList = () => {
  const [roomList, setRoomList] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

  useEffect(() => {
    const fetchRooms = async () => {
      try {
        setLoading(true);
        setError(null);
        const response = await axios.get(`${API_BASE_URL}/room/getAllRoom`);
        
        if (response.data && response.data.status === "success") {
          setRoomList(response.data.data);
        } else {
          setError(response.data.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng.");
          setRoomList([]);
        }
      } catch (err) {
        console.error("L·ªói khi t·∫£i danh s√°ch ph√≤ng:", err);
        setError(err.message || "ƒê√£ c√≥ l·ªói x·∫£y ra t·ª´ server.");
        setRoomList([]);
      } finally {
        setLoading(false);
      }
    };

    if (API_BASE_URL) { // Ch·ªâ fetch n·∫øu API_BASE_URL ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
        fetchRooms();
    } else {
        setError("VITE_API_BASE_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env c·ªßa admin.");
        setLoading(false);
    }
  }, [API_BASE_URL]);

  const deleteRoom = async (id) => { // S·ª≠a h√†m n√†y ƒë·ªÉ g·ªçi API
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ph√≤ng n√†y?')) { // D√πng window.confirm
      try {
        // TODO: Hi·ªÉn th·ªã loading khi x√≥a
        const response = await axios.delete(`${API_BASE_URL}/room/deleteRoom/${id}`);
        if (response.data && response.data.status === 'success') {
          setRoomList(prevList => prevList.filter((room) => room.id !== id));
          alert('X√≥a ph√≤ng th√†nh c√¥ng!'); // Ho·∫∑c d√πng react-toastify
        } else {
          alert(response.data.message || 'X√≥a ph√≤ng th·∫•t b·∫°i.');
        }
      } catch (err) {
        console.error("L·ªói khi x√≥a ph√≤ng:", err);
        alert(err.message || 'ƒê√£ c√≥ l·ªói x·∫£y ra khi x√≥a ph√≤ng.');
      }
    }
  };

  if (loading) {
    return <p className="p-8 text-center">ƒêang t·∫£i danh s√°ch ph√≤ng...</p>;
  }

  if (error) {
    return <p className="p-8 text-center text-red-500">L·ªói: {error}</p>;
  }

  if (!roomList || roomList.length === 0) {
    return <p className="p-8 text-center">Kh√¥ng c√≥ ph√≤ng n√†o ƒë·ªÉ hi·ªÉn th·ªã.</p>;
  }

  return (
    <>
      <p className="mb-4 text-xl font-semibold">Danh s√°ch t·∫•t c·∫£ c√°c ph√≤ng</p>

      <div className="flex flex-col gap-2">
        <div className="hidden md:grid grid-cols-[1fr_2fr_1fr_1fr_1fr_1fr_1fr_1fr] items-center py-2 px-3 border bg-gray-100 text-sm font-medium">
          <span>·∫¢nh</span>
          <span>S·ªë ph√≤ng</span>
          <span>T√≤a</span>
          <span>Gi·ªõi t√≠nh</span>
          <span>T·∫ßng</span>
          <span>S·ª©c ch·ª©a</span>
          <span>Ti·ªán nghi</span>
          <span className="text-center">H√†nh ƒë·ªông</span>
        </div>

        {roomList.map((room) => (
          <div
            key={room.id} // S·ª≠ d·ª•ng room.id t·ª´ API
            className="grid grid-cols-[1fr_2fr] md:grid-cols-[1fr_2fr_1fr_1fr_1fr_1fr_1fr_1fr] items-center gap-2 px-3 py-2 border text-sm"
          >
            <img 
              src={room.image ? `${BACKEND_STATIC_URL}/uploads/${room.image}` : 'placeholder_image_url.jpg'} // X·ª≠ l√Ω n·∫øu kh√¥ng c√≥ ·∫£nh
              alt={`Ph√≤ng ${room.room_number}`} 
              className="w-full h-14 object-cover rounded-md" 
            />
            <p>{room.room_number}</p> {/* API tr·∫£ v·ªÅ room_number */}
            <p>{room.building_name}</p> {/* API tr·∫£ v·ªÅ building_name */}
            <p>{room.gender}</p>
            <p>{room.floor}</p>
            <p>{room.capacity} ng∆∞·ªùi</p>
            <p className="text-xs truncate">{room.accommodations ? room.accommodations.join(', ') : 'Kh√¥ng c√≥'}</p> {/* Hi·ªÉn th·ªã ti·ªán nghi */}
            <div className="flex justify-end md:justify-center gap-2">
              <button
                onClick={() => navigate(`/edit-room/${room.id}`)} // Chuy·ªÉn id t·ª´ API
                className="text-blue-500 hover:underline"
              >
                üìù S·ª≠a
              </button>
              <button
                onClick={() => deleteRoom(room.id)} // Chuy·ªÉn id t·ª´ API
                className="text-red-500 hover:underline"
              >
                ‚ùå X√≥a
              </button>
              <button
  onClick={() => navigate(`/admin-room-detail/${room.id}`)} // ƒêi·ªÅu h∆∞·ªõng
  className="text-purple-600 hover:underline text-xs" // ƒê·ªïi m√†u cho kh√°c n√∫t S·ª≠a/X√≥a
>
  Chi Ti·∫øt
</button>
            </div>
          </div>
        ))}
      </div>
    </>
  );
};

export default RoomList;