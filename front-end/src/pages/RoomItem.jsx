// C:\Users\Admin\OneDrive - Hanoi University of Science and Technology\backup\k√¨ 6\Project 2\PRJ\quan-ly-ki-tuc-xa\front-end\src\pages\RoomItem.jsx
//import React from 'react'; // Th√™m React n·∫øu b·∫°n d√πng JSX transform c≈© ho·∫∑c c√°c hook kh√°c
import PropTypes from 'prop-types';
import { Link } from 'react-router-dom';
import { assets } from '../assets/assets'; // D√πng cho ·∫£nh placeholder n·∫øu c·∫ßn

const BACKEND_STATIC_URL = 'http://localhost:5000'; // URL g·ªëc c·ªßa backend n∆°i ch·ª©a th∆∞ m·ª•c uploads

const RoomItem = ({ id, image, name, building, gender, capacity, floor, facilities, available }) => {
  const displayedFacilities = (facilities || []).slice(0, 2).join(', ');
  const remainingFacilitiesCount = facilities ? Math.max(0, facilities.length - 2) : 0;
  const remainingText = remainingFacilitiesCount > 0 ? ` +${remainingFacilitiesCount} kh√°c` : '';

  const roomCardContent = (
    <div className={`border rounded-xl overflow-hidden shadow-sm transition-all duration-300 h-full flex flex-col bg-white ${available === 0 ? 'opacity-60 cursor-not-allowed' : 'hover:shadow-lg hover:scale-[1.02]'}`}>
      <img 
        src={image ? `${BACKEND_STATIC_URL}/uploads/${image}` : assets.room1} // S·ª≠ d·ª•ng assets.room1 l√†m placeholder n·∫øu kh√¥ng c√≥ ·∫£nh
        alt={`Ph√≤ng ${name}`} 
        className="w-full h-40 object-cover" 
        onError={(e) => { e.target.onerror = null; e.target.src = assets.room1; }} // Fallback
      />
      <div className="p-4 text-sm space-y-1.5 flex-grow flex flex-col"> {/* Th√™m flex-grow v√† flex-col */}
        <h3 className="font-semibold text-base text-gray-800 truncate" title={name}>{name}</h3>
        <p className="text-gray-600"><span className="font-medium">T√≤a:</span> {building}</p>
        <p className="text-gray-600"><span className="font-medium">Gi·ªõi t√≠nh:</span> {gender === 'Nam' ? 'üë® Nam' : (gender === 'N·ªØ' ? 'üë© N·ªØ' : 'Nam/N·ªØ')}</p>
        <p className="text-gray-600"><span className="font-medium">S·ª©c ch·ª©a:</span> {capacity} ng∆∞·ªùi</p>
        <p className="text-gray-600"><span className="font-medium">T·∫ßng:</span> {floor}</p>
        {(facilities || []).length > 0 && (
            <p className="text-gray-600" title={(facilities || []).join(', ')}>
            <span className="font-medium">Ti·ªán nghi:</span> {displayedFacilities}
            {remainingText && <span className="text-gray-500 italic text-xs">{remainingText}</span>}
            </p>
        )}
        <div className="mt-auto pt-2"> {/* ƒê·∫©y ph·∫ßn tr·∫°ng th√°i xu·ªëng d∆∞·ªõi */}
            <p className="font-medium">
            Tr·∫°ng th√°i:{' '}
            {available > 0 ? (
                <span className="text-green-600 font-semibold">C√≤n {available} ch·ªó</span>
            ) : (
                <span className="text-red-500 font-semibold">H·∫øt ch·ªó</span>
            )}
            </p>
        </div>
      </div>
    </div>
  );

  // Ch·ªâ cho ph√©p click v√†o Link n·∫øu ph√≤ng c√≤n ch·ªó
  return available > 0 ? (
    <Link to={`/room/${id}`} className="block text-gray-800 transition-transform duration-200 h-full">
      {roomCardContent}
    </Link>
  ) : (
    <div className="h-full">{roomCardContent}</div> // V·∫´n render card nh∆∞ng kh√¥ng c√≥ Link
  );
};

RoomItem.propTypes = {
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired, // ID c√≥ th·ªÉ l√† s·ªë t·ª´ DB
  image: PropTypes.string, // Cho ph√©p null n·∫øu kh√¥ng c√≥ ·∫£nh
  name: PropTypes.string.isRequired,
  building: PropTypes.string.isRequired,
  gender: PropTypes.string.isRequired,
  capacity: PropTypes.number.isRequired,
  floor: PropTypes.number.isRequired,
  available: PropTypes.number.isRequired,
  facilities: PropTypes.arrayOf(PropTypes.string), // Cho ph√©p null ho·∫∑c m·∫£ng r·ªóng
};

// Gi√° tr·ªã m·∫∑c ƒë·ªãnh cho props (n·∫øu c·∫ßn, v√≠ d·ª• facilities)
RoomItem.defaultProps = {
    image: null,
    facilities: [],
};

export default RoomItem;